users = SELECT(User)
all users = SELECT(User)
all existing users = SELECT(User)

issues assigned to Mike = SELECT(Issue) => FILTER(assigned_to,'Mike','in')
issues which are assigned to Mike = SELECT(Issue) => FILTER(assigned_to,'Mike','in')
what are issues assigned to Mike? = SELECT(Issue) => FILTER(assigned_to,'Mike','in')
all issues where Mike has an assignment = SELECT(Issue) => FILTER(assigned_to,'Mike','in')
what are issues where Mike has an assignment? = SELECT(Issue) => FILTER(assigned_to,'Mike','in')
issues where Mike is an assignee = SELECT(Issue) => FILTER(assigned_to,'Mike','in')
issues that are assigned to Mike = SELECT(Issue) => FILTER(assigned_to,"Mike","in")
issues that assigned to Mike = SELECT(Issue) => FILTER(assigned_to,"Mike","in")

issues created by Mike = SELECT(Issue) =>FILTER(created_by,'Mike','in')
what are issues created by Mike? = SELECT(Issue) =>FILTER(created_by,'Mike','in')
What issues did Mike create? = SELECT(Issue) =>FILTER(created_by,'Mike','in')
issues which were created by Mike = SELECT(Issue) =>FILTER(created_by,'Mike','in')
fow what issues is Mike a creator? = SELECT(Issue) =>FILTER(created_by,'Mike','in')
issues submitted by Mike = SELECT(Issue) =>FILTER(created_by,'Mike','in')
what issues did Mike submitted? = SELECT(Issue) =>FILTER(created_by,'Mike','in')
what issues did Mike opened? = SELECT(Issue) =>FILTER(created_by,'Mike','in')
all issues which are opened by Mike = SELECT(Issue) =>FILTER(created_by,'Mike','in')
issues which Mike opened = SELECT(Issue) =>FILTER(created_by,'Mike','in')

issues created by Mike or Gleb = SELECT(Issue)=>FILTER(created_by, set('Mike','Gleb'),'in')
what are issues created by either Mike or Gleb? = SELECT(Issue)=>FILTER(created_by, set('Mike','Gleb'),'in')
issues created by or Mike or Gleb = SELECT(Issue)=>FILTER(created_by, set('Mike','Gleb'),'in')

repositories with issues created by Mike = SELECT(Repository)=>FILTER_RELATED(PROPERTY('Mike',inverseOf(created_by)))
where are issues which Mike created? = SELECT(Repository)=>FILTER_RELATED(PROPERTY('Mike',inverseOf(created_by)))
what are repositories containing issues opened by Mike? = SELECT(Repository)=>FILTER_RELATED(PROPERTY('Mike',inverseOf(created_by)))
repositories which store issues created by Mike = SELECT(Repository)=>FILTER_RELATED(PROPERTY('Mike',inverseOf(created_by)))
where are issues created by Mike contained? = SELECT(Repository)=>FILTER_RELATED(PROPERTY('Mike',inverseOf(created_by)))
what repositories include issues which were opened by Mike? = SELECT(Repository)=>FILTER_RELATED(PROPERTY('Mike',inverseOf(created_by)))
where did Mike created issues? = SELECT(Repository)=>FILTER_RELATED(PROPERTY('Mike',inverseOf(created_by)))

open issues = SELECT(Issue)=>FILTER_RELATED('open')
all open issues = SELECT(Issue)=>FILTER_RELATED('open') 
any issues which are open = SELECT(Issue)=>FILTER_RELATED('open')
issues which are open at the moment = SELECT(Issue)=>FILTER_RELATED('open')
issues which are not closed = SELECT(Issue)=>FILTER_RELATED('open')
issues which should be solved = SELECT(Issue)=>FILTER_RELATED('open')
issues which should be fixed = SELECT(Issue)=>FILTER_RELATED('open')
what are open issues? = SELECT(Issue)=>FILTER_RELATED('open')

number of open issues = SELECT(Issue)=>FILTER_RELATED('open')=>COUNT()
count all open issues = SELECT(Issue)=>FILTER_RELATED('open')=>COUNT()
what is the total number of open issues? = SELECT(Issue)=>FILTER_RELATED('open')=>COUNT()
what is the number of issues which are not closed yet? = SELECT(Issue)=>FILTER_RELATED('open')=>COUNT()
How many issues are open? = SELECT(Issue)=>FILTER_RELATED('open')=>COUNT()

issues with more than 5 comments = SELECT(Issue)=>FILTER(comments,"5",">")
issues which have more than 5 comments = SELECT(Issue)=>FILTER(comments,"5",">")
issues which were commented more than 5 times = SELECT(Issue)=>FILTER(comments,"5",">")
what issues contain more than 5 comments? = SELECT(Issue)=>FILTER(comments,"5",">")
issues with at least 6 comments = SELECT(Issue)=>FILTER(comments,"5",">")
issues with no less than 6 comments = SELECT(Issue)=>FILTER(comments,"5",">")

issues with more comments than in #434 = SELECT(Issue)=>FILTER(comments,PROPERTY("#434",comments),">")
issues which contain more comments than #434 does = SELECT(Issue)=>FILTER(comments,PROPERTY("#434",comments),">")
what issues contain more comments in comparison with #434? = SELECT(Issue)=>FILTER(comments,PROPERTY("#434",comments),">")
what issues are more commented in comparison to #434? = SELECT(Issue)=>FILTER(comments,PROPERTY("#434",comments),">")
for what issues the total number of comments is more than in #434? = SELECT(Issue)=>FILTER(comments,PROPERTY("#434",comments),">")

repositories with more issues than Denis created = SELECT(Repository)=>FILTER(issues,PROPERTY("Denis",created),"count>")
count all issues created by Denis and select repositories which have more issues than this number = SELECT(Repository)=>FILTER(issues,PROPERTY("Denis",created),"count>")
repositories which have higher number of issues than Denis submitted = SELECT(Repository)=>FILTER(issues,PROPERTY("Denis",created),"count>")

Who created more issues than Denis = SELECT(User)=>FILTER(issues,PROPERTY("Denis",created),"count>")
what users opened more issues than Denis did = SELECT(User)=>FILTER(issues,PROPERTY("Denis",created),"count>")
who has more submitted issues than Denis has = SELECT(User)=>FILTER(issues,PROPERTY("Denis",created),"count>")

comments created by users from CISCO = SELECT(Comment)=>FILTER(user,PROPERTY('CISCO',inverseOf(from)),'in')
what comments did CISCO users create? = SELECT(Comment)=>FILTER(user,PROPERTY('CISCO',inverseOf(from)),'in')
comments which were written by users who work for CISCO = SELECT(Comment)=>FILTER(user,PROPERTY('CISCO',inverseOf(from)),'in')
what comments did users from CISCO leave? = SELECT(Comment)=>FILTER(user,PROPERTY('CISCO',inverseOf(from)),'in')

total number of comments = SELECT(Comment)=>COUNT()
how many comments were created? = SELECT(Comment)=>COUNT()
how many comments were written? = SELECT(Comment)=>COUNT()
total amount of all comments = SELECT(Comment)=>COUNT()

comments in #434 = SELECT(Comment)=> FILTER_RELATED("#434")
all comments in #434 = SELECT(Comment)=> FILTER_RELATED("#434")
all discussion in #434 = SELECT(Comment)=> FILTER_RELATED("#434")
all comments which issue 434 received = SELECT(Comment)=> FILTER_RELATED("#434")
what comments issue 434 contains? = SELECT(Comment)=> FILTER_RELATED("#434")
what comments were created in #434? = SELECT(Comment)=> FILTER_RELATED("#434")
how was #434 commented? = SELECT(Comment)=> FILTER_RELATED("#434")
comments which #434 has = SELECT(Comment)=> FILTER_RELATED("#434")
comments in issue #434 = SELECT(Comment)=> FILTER_RELATED("#434")
comments related to #434 = SELECT(Comment)=> FILTER_RELATED("#434")
comments of #434 = SELECT(Comment)=> FILTER_RELATED("#434")

comments created by Mike in #434 = SELECT(Comment) => FILTER(user,"Mike",'in') => FILTER_RELATED("#434")
what comments in #434 were written by Mike? = SELECT(Comment) => FILTER(user,"Mike",'in') => FILTER_RELATED("#434")
how did Mike comment #434? = SELECT(Comment) => FILTER(user,"Mike",'in') => FILTER_RELATED("#434")
what comments from Mike does issue #434 contain? = SELECT(Comment) => FILTER(user,"Mike",'in') => FILTER_RELATED("#434")
comments from Mike in #434 = SELECT(Comment) => FILTER(user,"Mike",'in') => FILTER_RELATED("#434")
comments by Mike in #434 = SELECT(Comment) => FILTER(user,"Mike",'in') => FILTER_RELATED("#434")
what comments did Mike create in #434? = SELECT(Comment) => FILTER(user,"Mike",'in') => FILTER_RELATED("#434")
comments related to #434 and created by Mike = SELECT(Comment) => FILTER_RELATED("#434") => FILTER(user,"Mike",'in')

labels of #434 = SELECT(Label) => FILTER_RELATED("#434")
#434 labels = PROPERTY("#434",labels).
what labels are in #434? = SELECT(Label) => FILTER_RELATED("#434")
how is #434 labeled? = SELECT(Label) => FILTER_RELATED("#434")
what labels does #434 have? = SELECT(Label) => FILTER_RELATED("#434")
what labels are added to #434? = SELECT(Label) => FILTER_RELATED("#434")
labels which are applied to #434 = SELECT(Label) => FILTER_RELATED("#434")

Denis issues = SELECT(Issue)=>FILTER_RELATED('Denis')
issues which are related to Denis = SELECT(Issue)=>FILTER_RELATED('Denis')
what issues are connected with Denis? = SELECT(Issue)=>FILTER_RELATED('Denis')
all issues where Denis is mentioned = SELECT(Issue)=>FILTER_RELATED('Denis')
issues where Denis is participant = SELECT(Issue)=>FILTER_RELATED('Denis')
What issues does Denis take part in? = SELECT(Issue)=>FILTER_RELATED('Denis')
issues where Denis takes part = SELECT(Issue)=>FILTER_RELATED('Denis')

comments in issues assigned to Mike = SELECT(Comment)=>FILTER_RELATED(PROPERTY('Mike',inverseOf(assigned_to)))
comments where Mike is mentioned = SELECT(Comment)=>FILTER_RELATED(PROPERTY('Mike',inverseOf(assigned_to)))

issues not assigned to Mike and not assigned to Gleb = SELECT(Issue)=>FILTER(assigned_to,"Mike","not in")=>FILTER(assigned_to,"Gleb","not in")
issues which are not assigned to neither Mike nor Gleb = SELECT(Issue)=>FILTER(assigned_to,"Mike","not in")=>FILTER(assigned_to,"Gleb","not in")
For which issues Mike and Gleb are not assignees? = SELECT(Issue)=>FILTER(assigned_to,"Mike","not in")=>FILTER(assigned_to,"Gleb","not in")
issues not assigned to Mike and Gleb = SELECT(Issue)=>FILTER(assigned_to,"Mike","not in")=>FILTER(assigned_to,"Gleb","not in")
what issues don't have Mike and Gleb as assignees? = SELECT(Issue)=>FILTER(assigned_to,"Mike","not in")=>FILTER(assigned_to,"Gleb","not in")

issues that are not assigned to Mike = SELECT(Issue) => FILTER(assigned_to,"Mike","not in")
issues that not assigned to Mike = SELECT(Issue) => FILTER(assigned_to,"Mike","not in")
issues not assigned to Mike = SELECT(Issue) => FILTER(assigned_to,"Mike","not in")
issues where Mike is not an assignee = SELECT(Issue) => FILTER(assigned_to,"Mike","not in")
issues where Mike has no assignments = SELECT(Issue) => FILTER(assigned_to,"Mike","not in")

Mike issues that not assigned to Denis = SELECT(Issue) =>FILTER_RELATED('Mike')=>FILTER(assigned_to,"Denis","not in")
what issues are related to Mike but not assigned to Denis? = SELECT(Issue) =>FILTER_RELATED('Mike')=>FILTER(assigned_to,"Denis","not in")
Mike issues where Denis is not an assignee = SELECT(Issue) =>FILTER_RELATED('Mike')=>FILTER(assigned_to,"Denis","not in")
Mike issues where Denis have no assignments = SELECT(Issue) =>FILTER_RELATED('Mike')=>FILTER(assigned_to,"Denis","not in")

issues that are not assigned to = SELECT(Issue)=>FILTER(assigned_to,"*","not in")
issues that don't have any assignees = ELECT(Issue)=>FILTER(assigned_to,"*","not in")
issues that are not assigned to anyone = ELECT(Issue)=>FILTER(assigned_to,"*","not in")
issues without assignee =SELECT(Issue)=>FILTER(assignee,"*","not in")

issues that are assigned to = SELECT(Issue)=>FILTER(assigned_to,"*","in")
issues that have at least one assignee = SELECT(Issue)=>FILTER(assigned_to,"*","in")
issues that have at least one assignment = SELECT(Issue)=>FILTER(assigned_to,"*","in")
what issues are assigned to anyone? = SELECT(Issue)=>FILTER(assigned_to,"*","in")

issues created by Mike and not assigned to = SELECT(Issue)=>FILTER(created_by,"Mike","in")=>FILTER(assigned_to,"*","not in")
what issues Mike created and not assigned? = SELECT(Issue)=>FILTER(created_by,"Mike","in")=>FILTER(assigned_to,"*","not in")
what issues opened by Mike are not assigned? = SELECT(Issue)=>FILTER(created_by,"Mike","in")=>FILTER(assigned_to,"*","not in")
issues which were opened by Mike and don't have any assignments = SELECT(Issue)=>FILTER(created_by,"Mike","in")=>FILTER(assigned_to,"*","not in")
issues created by Mike without any assignments = SELECT(Issue)=>FILTER(created_by,"Mike","in")=>FILTER(assigned_to,"*","not in")
what issues which are not assigned were created by Mike? = SELECT(Issue)=>FILTER(created_by,"Mike","in")=>FILTER(assigned_to,"*","not in")
issues that are not assigned and created by Mike= SELECT(Issue)=>FILTER(assigned_to,"*","not in")=>FILTER(created_by,"Mike","in")

issues with label 'Bug' = SELECT(Issue)=>FILTER(labels,"Bug","in")
issues which are labeled with 'Bug' = SELECT(Issue)=>FILTER(labels,"Bug","in")
what issues have label 'Bug'? = SELECT(Issue)=>FILTER(labels,"Bug","in")

issues with label 'Bug' and label Blocker = SELECT(Issue)=>FILTER(labels,"Bug","in")=>FILTER(labels,"Blocker","in")
what issues have both labels 'Bug' and Blocker? = SELECT(Issue)=>FILTER(labels,"Bug","in")=>FILTER(labels,"Blocker","in")
what issues are labeled with 'Bug' and Blocker? = SELECT(Issue)=>FILTER(labels,"Bug","in")=>FILTER(labels,"Blocker","in")

users who created open issues = SELECT(User)=>FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in")
who created open issues? = SELECT(User)=>FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in")
who created issues that are not closed yet? = SELECT(User)=>FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in")
who has open issues? = SELECT(User)=>FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in")
users whose issues are open = SELECT(User)=>FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in")

users who created more than 5 open issues = SELECT(User)=>COUNT_COMPARE(FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in"),5,">")
users whose at least 6 issues are open = SELECT(User)=>COUNT_COMPARE(FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in"),5,">")
users who created more than 5 not closed issues = SELECT(User)=>COUNT_COMPARE(FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in"),5,">")
users who have at least 6 open issues = SELECT(User)=>COUNT_COMPARE(FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in"),5,">")
who created issues, at least 6 of which are open = SELECT(User)=>COUNT_COMPARE(FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in"),5,">")
who created more then 5 open issues= COUNT_COMPARE(FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in"),5,">")
users with more then 5 open issues = SELECT(User)=>COUNT_COMPARE(FILTER_RELATED(SELECT(Issue)=>FILTER_RELATED('open')),5,">")

issues created last month = SELECT(Issue)=>FILTER(created_at,"last month","in")
issues which were opened last month = SELECT(Issue)=>FILTER(created_at,"last month","in")
what issues were opened last month? = SELECT(Issue)=>FILTER(created_at,"last month","in")

issues commented by Denis = SELECT(Issue)=>FILTER(comments,PROPERTY("Denis",inverseOf(user)),"in")
what issues contain comments from Denis? = SELECT(Issue)=>FILTER(comments,PROPERTY("Denis",inverseOf(user)),"in")
what issues Denis commented? = SELECT(Issue)=>FILTER(comments,PROPERTY("Denis",inverseOf(user)),"in")
issues where Denis left comments = SELECT(Issue)=>FILTER(comments,PROPERTY("Denis",inverseOf(user)),"in")
issues which are commented by Denis = SELECT(Issue)=>FILTER(comments,PROPERTY("Denis",inverseOf(user)),"in")
issues with comments created by Gleb = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment)=>FILTER(created_by,"Gleb","in"))
issues that have comments created by Gleb = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment)=>FILTER(created_by,"Gleb","in"))

most commented issues = SELECT(Issue)=>ORDER_BY(comments,">")
issues which are commented the most = SELECT(Issue)=>ORDER_BY(comments,">")
issues with most comments = SELECT(Issue)=>ORDER_BY(comments,">")
issues with maximum number of comments = SELECT(Issue)=>ORDER_BY(comments,">")

most commented open issues = SELECT(Issue)=>FILTER_RELATED('open')=>ORDER_BY(comments,">")
order open issues by the number of comments = SELECT(Issue)=>FILTER_RELATED('open')=>ORDER_BY(comments,">")
issues which are not closed yet with the max number of comments = SELECT(Issue)=>FILTER_RELATED('open')=>ORDER_BY(comments,">")
issues with opened state and which were commented the most = SELECT(Issue)=>FILTER_RELATED('open')=>ORDER_BY(comments,">")

issues with most comments created by Gleb = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment)=>FILTER(created_by,"Gleb","in"))=>ORDER_BY(comments,">")
issues where the most comments are from Gleb = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment)=>FILTER(created_by,"Gleb","in"))=>ORDER_BY(comments,">")
issues where Gleb is the most active commentator = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment)=>FILTER(created_by,"Gleb","in"))=>ORDER_BY(comments,">")

issues with most comments not created by Gleb = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment)=>FILTER(created_by,"Gleb","not in"))=>ORDER_BY(comments,">")
issues where most comments were not written by Gleb = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment)=>FILTER(created_by,"Gleb","not in"))=>ORDER_BY(comments,">")

comments that are related to issues created by Gleb = SELECT(Comment)=>FILTER_RELATED(SELECT(Issue)=>FILTER(created_by,"Gleb","in"))
what comments do issues that are created by Gleb contain? = SELECT(Comment)=>FILTER_RELATED(SELECT(Issue)=>FILTER(created_by,"Gleb","in"))

issues without labels = SELECT(Issue)=>FILTER(labels,"*","not in")
not labeled issues = SELECT(Issue)=>FILTER(labels,"*","not in")
issues with no labels = SELECT(Issue)=>FILTER(labels,"*","not in")
what issues have no labels? = SELECT(Issue)=>FILTER(labels,"*","not in")
what issues are without any labels? = SELECT(Issue)=>FILTER(labels,"*","not in")
if there are issues without labels, what are they? = SELECT(Issue)=>FILTER(labels,"*","not in")

issues in M3 without assignee = SELECT(Issue)=>FILTER_RELATED("M3")=>FILTER(assignee,"*","not in")
what issues in M3 have no assignments? = SELECT(Issue)=>FILTER_RELATED("M3")=>FILTER(assignee,"*","not in")
issues in M3 which are not assigned to anyone = SELECT(Issue)=>FILTER_RELATED("M3")=>FILTER(assignee,"*","not in")
what issues does M3 contain which are without any assignees? = SELECT(Issue)=>FILTER_RELATED("M3")=>FILTER(assignee,"*","not in")

assignees of issues = SELECT(Issue) => MAP_BY_PROPERTY(assignee)
all users who are assignees in issues = SELECT(Issue) => MAP_BY_PROPERTY(assignee)
who have assignments? = SELECT(Issue) => MAP_BY_PROPERTY(assignee)

What is the maximum number of comments = SELECT(Issue) => MAP_BY_PROPERTY(comments)=> MAX()
max number of comments = SELECT(Issue) => MAP_BY_PROPERTY(comments)=> MAX()
what is the biggest amount of comments in issues? = SELECT(Issue) => MAP_BY_PROPERTY(comments)=> MAX()

Who created most of issues in raml-js-parser-2 = FILTER(created,SELECT(Issue)=>FILTER_RELATED("raml-js-parser-2"),"in")=>ORDER_BY_PASSING_COUNT(">")
who is the most active creator of issues in raml-js-parser-2? = FILTER(created,SELECT(Issue)=>FILTER_RELATED("raml-js-parser-2"),"in")=>ORDER_BY_PASSING_COUNT(">")

repositories with most of issues = SELECT(Repository)=> ORDER_BY(issues,"count>")
repositories where the number of issues is more than in other repositories = SELECT(Repository)=> ORDER_BY(issues,"count>")
repositories with maximum number of issues = SELECT(Repository)=> ORDER_BY(issues,"count>")

users who have issues assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),"*","in")
users with issues assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),"*","in")
users who are the participants in issues that are assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),"*","in")
useres who are related to issues and have an assignment in this issue at the same time = SELECT(User) => FILTER(inverseOf(assigned_to),"*","in")
users with assignments to their issues = SELECT(User) => FILTER(inverseOf(assigned_to),"*","in")
users who take parts in issues assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),"*","in")

users who have open issues assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open"),"in")
who have assignments in open issues? = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open"),"in")
who are assignees in issues which are not closed yet? = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open"),"in")
users who are assignees in issues which should be done = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open"),"in")

users who have open issues created by Mike assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open")=>FILTER(created_by,"Mike","in"),"in")
users whose assignments are related to the issues which were created by Mike and still open = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open")=>FILTER(created_by,"Mike","in"),"in")
who have assignments in open issues submitted by Mike? = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open")=>FILTER(created_by,"Mike","in"),"in")
who are assignees in issues opened by Mike and not closed yet? = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open")=>FILTER(created_by,"Mike","in"),"in")
who are assigned in open issues created by Mike? = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open")=>FILTER(created_by,"Mike","in"),"in")
users who have open issues whose creator is Mike = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open")=>FILTER(created_by,"Mike","in"),"in")

users without issues assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),"*","not in")
users who are not assignees = SELECT(User) => FILTER(inverseOf(assigned_to),"*","not in")
who are not assignee? = SELECT(User) => FILTER(inverseOf(assigned_to),"*","not in")
who have no assignments? = SELECT(User) => FILTER(inverseOf(assigned_to),"*","not in")

users who did not create issues = SELECT(User)=>FILTER(created,"*","not in")
users who did not create any issues = SELECT(User)=>FILTER(created,"*","not in")
who have never created any issues? = SELECT(User)=>FILTER(created,"*","not in")
who don't have submitted issues? = SELECT(User)=>FILTER(created,"*","not in")

repositories without open issues = SELECT(Repository)=>FILTER(issues,SELECT(Issue)=>FILTER_RELATED("open"),"not in")
repositories which have no open issues = SELECT(Repository)=>FILTER(issues,SELECT(Issue)=>FILTER_RELATED("open"),"not in")
what repositories don't contain any open issues? = SELECT(Repository)=>FILTER(issues,SELECT(Issue)=>FILTER_RELATED("open"),"not in")

repositories ordered by stars = SELECT(Repository) => ORDER_BY(stars,">")
repositories ordered by number of stars = SELECT(Repository) => ORDER_BY(stars,">")
order repositories by the amount of stars = SELECT(Repository) => ORDER_BY(stars,">")

repositories ordered by number of open issues = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER_RELATED('open')=>COUNT(),">")
order repositories by the total amount of open issues = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER_RELATED('open')=>COUNT(),">")
repositories ordered by number of issues which are open = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER_RELATED('open')=>COUNT(),">")
repositories ordered by the total number of issues which have opened state =SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER_RELATED('open')=>COUNT(),">")
repositories ordered by the number of issues which are not closed yet = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER_RELATED('open')=>COUNT(),">")
order repositories by number of issues which are not completed yet = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER_RELATED('open')=>COUNT(),">")

issues created by users from CISCO = SELECT(Issue)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")
issues which are created by users who work for CISCO = SELECT(Issue)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")
what issues were opened by users from CISCO? = SELECT(Issue)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")
what issues did users from CISCO submit? = SELECT(Issue)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")
issues created by CISCO users = SELECT(Issue)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")

repositories ordered by number of issues created by users from CISCO = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")=>COUNT(),">")
select repositories which have issues opened by users from CISCO and order them = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")=>COUNT(),">")
repositories ordered by the total number of issues which were submitted by users who work for CISCO = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")=>COUNT(),">")
repositories ordered by number of issues created by the CISCO team = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")=>COUNT(),">")

repository with maximum amount of issues created by users from CISCO = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")=>COUNT(),">")=>FIRST()
what repository has the highest number of issues opened by users who work for CISCO? = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")=>COUNT(),">")=>FIRST()
where did users from CISCO create the issues most of all? = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")=>COUNT(),">")=>FIRST()
what repository has the max total number of issues submitted by users from CISCO? = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")=>COUNT(),">")=>FIRST()

issues that are assigned to the same user that created them = SELECT(Issue) => FILTER(assigned_to,PROPERTY(CONTEXT(),created_by),"in")
issues where creator and assignee is the same user = SELECT(Issue) => FILTER(assigned_to,PROPERTY(CONTEXT(),created_by),"in")
what issues were opened and assigned to the same user? = SELECT(Issue) => FILTER(assigned_to,PROPERTY(CONTEXT(),created_by),"in")

Users that created more than 1 issue = SELECT(User) => FILTER(created,1,"count>")
users who created issues = SELECT(User) => FILTER(created,1,"count>")
who submitted issues? = SELECT(User) => FILTER(created,1,"count>")
users who opened issues = SELECT(User) => FILTER(created,1,"count>")
who opened more than 1 issues? = SELECT(User) => FILTER(created,1,"count>")

issues that are assigned to Denis but not created by Gleb = SELECT(Issue)=>FILTER(assigned_to,"Denis","in")=>FILTER(created_by,"Gleb","not in")
issues where Denis is an assignee and Gleb is not a creator = SELECT(Issue)=>FILTER(assigned_to,"Denis","in")=>FILTER(created_by,"Gleb","not in")
what issues were not opened by Gleb but have Denis as a creator? = SELECT(Issue)=>FILTER(assigned_to,"Denis","in")=>FILTER(created_by,"Gleb","not in")
issues where Denis has an assignment but they were not submitted by Gleb = SELECT(Issue)=>FILTER(assigned_to,"Denis","in")=>FILTER(created_by,"Gleb","not in")
issues which were created by anyone except for Gleb and are assigned to Denis = SELECT(Issue)=>FILTER(assigned_to,"Denis","in")=>FILTER(created_by,"Gleb","not in")

issues without comments = SELECT(Issue)=>not(FILTER_RELATED(SELECT(Comment)))
what issues don't contain comments? = SELECT(Issue)=>not(FILTER_RELATED(SELECT(Comment)))
issues which are not commented = SELECT(Issue)=>not(FILTER_RELATED(SELECT(Comment)))
what issues have no comments? = SELECT(Issue)=>not(FILTER_RELATED(SELECT(Comment)))
what issues didn't anyone comment? = SELECT(Issue)=>not(FILTER_RELATED(SELECT(Comment)))
issues that are commented by nobody = SELECT(Issue)=>not(FILTER_RELATED(SELECT(Comment)))

issues with comments = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment))
commented issues = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment))
issues which contain at least 1 comment = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment))
issues which were commented = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment))
what issues were commented? = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment))
what issues have discussion? = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment))
what issues dis users comment? = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment))

issues with open milestones = SELECT(Issue)=>FILTER_RELATED(SELECT(Milestone)=>FILTER_RELATED("open"))
issues with milestones which are open = SELECT(Issue)=>FILTER_RELATED(SELECT(Milestone)=>FILTER_RELATED("open"))
issues with set open milestones = SELECT(Issue)=>FILTER_RELATED(SELECT(Milestone)=>FILTER_RELATED("open"))
issues that have set milestones and they are open = SELECT(Issue)=>FILTER_RELATED(SELECT(Milestone)=>FILTER_RELATED("open"))
issues which have open milestones = SELECT(Issue)=>FILTER_RELATED(SELECT(Milestone)=>FILTER_RELATED("open"))

milestones that have more than 4 open issues ordered by created at = SELECT(Milestone)=>FILTER_QUERY( MAP_BY_PROPERTY(inverseOf(milestone))=>SELECT(Issue)=>FILTER_RELATED('open'),4,"count>")=>ORDER_BY(created_at,">")
milestones with more than 4 open issues ordered by time of creation = SELECT(Milestone)=>FILTER_QUERY( MAP_BY_PROPERTY(inverseOf(milestone))=>SELECT(Issue)=>FILTER_RELATED('open'),4,"count>")=>ORDER_BY(created_at,">")

issues with more comments than count of repositories = SELECT(Issue)=>FILTER(comments,SELECT(Repository)=>COUNT(),">")
issues which have more comments than number of repositories = SELECT(Issue)=>FILTER(comments,SELECT(Repository)=>COUNT(),">")
count repositories and select issues with more comments than this number = SELECT(Issue)=>FILTER(comments,SELECT(Repository)=>COUNT(),">")
what issues have more comment than total number of repositories? = SELECT(Issue)=>FILTER(comments,SELECT(Repository)=>COUNT(),">")

issues sorted by count of comments = SELECT(Issue)=>ORDER_BY(comments,">")
issues sorted by the number of comments = SELECT(Issue)=>ORDER_BY(comments,">")
sort issues by the total amount of comments = SELECT(Issue)=>ORDER_BY(comments,">")
count comments and sort issues according to it = SELECT(Issue)=>ORDER_BY(comments,">")

issues that have closed state = SELECT(Issue)=>FILTER(state,"closed","in")
issues which are closed = SELECT(Issue)=>FILTER(state,"closed","in")
issues which are completed = SELECT(Issue)=>FILTER(state,"closed","in")
what issues are done? = SELECT(Issue)=>FILTER(state,"closed","in")
issues which don't have open state anymore = SELECT(Issue)=>FILTER(state,"closed","in")

issues not assigned to user who created them = SELECT(Issue) => FILTER(assigned_to,PROPERTY(CONTEXT(),created_by),"not in")
issues that are not assigned to its creator = SELECT(Issue) => FILTER(assigned_to,PROPERTY(CONTEXT(),created_by),"not in")
issues without assignment to its creator = SELECT(Issue) => FILTER(assigned_to,PROPERTY(CONTEXT(),created_by),"not in")

issues that have from 5 to 10 comments = SELECT(Issue)=>FILTER(comments,5,">=")=>FILTER(comments,10,"<=")
issues which have no less than 5 comments and no more than 10 comments = SELECT(Issue)=>FILTER(comments,5,">=")=>FILTER(comments,10,"<=")
issues which were commented from 5 to 10 times = SELECT(Issue)=>FILTER(comments,5,">=")=>FILTER(comments,10,"<=")
issues where size of discussion is 5 - 10 comments = SELECT(Issue)=>FILTER(comments,5,">=")=>FILTER(comments,10,"<=")
issues with 5 - 10 comments = SELECT(Issue)=>FILTER(comments,5,">=")=>FILTER(comments,10,"<=")
issues with comments in range from 5 to 10 = SELECT(Issue)=>FILTER(comments,5,">=")=>FILTER(comments,10,"<=")

issues that was created from last january to march = SELECT(Issue)=>FILTER(created,"last january",">=")=>FILTER(comments,"march","<=")
what issues were opened in period from last january to march? = SELECT(Issue)=>FILTER(created,"last january",">=")=>FILTER(comments,"march","<=")
what issues have date of creation since last january up to march? = SELECT(Issue)=>FILTER(created,"last january",">=")=>FILTER(comments,"march","<=")
what issues were opened between last january and march? = SELECT(Issue)=>FILTER(created,"last january",">=")=>FILTER(comments,"march","<=")

When newest issue in raml-js-parser was created? = SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>MAP_BY_PROPERTY(created_by)=>MAX()
what is the creation date of the last issue in raml-js-parser? = SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>MAP_BY_PROPERTY(created_by)=>MAX()
when the last issue in raml-js-parser was submitted? = SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>MAP_BY_PROPERTY(created_by)=>MAX()
the date of last issue in raml-js-parser creation = SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>MAP_BY_PROPERTY(created_by)=>MAX()
the date when the newest issue was created in raml-js-parser = SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>MAP_BY_PROPERTY(created_by)=>MAX()

What is  newest issue in raml-js-parser? = SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>ORDER_BY(created_by,">")=>FIRST()
the latest issue in raml-js-parser = SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>ORDER_BY(created_by,">")=>FIRST()

What are the newest issues in raml-js-parser was created? = SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>ORDER_BY(created_at,">")
what issues were created of last time in raml-js-parser? = SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>ORDER_BY(created_at,">")

Users who created most of issues = SELECT(User)=>ORDER_BY(MAP_BY_PROPERTY(created)=>COUNT(),">")
users who opened the max number of issues = SELECT(User)=>ORDER_BY(MAP_BY_PROPERTY(created)=>COUNT(),">")
who submitted the maximum number of issues? = SELECT(User)=>ORDER_BY(MAP_BY_PROPERTY(created)=>COUNT(),">")

Users orderded by number of isssues assigned to them = SELECT(User) => ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),">")
order users by the number of their assignments = SELECT(User) => ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),">")

Top 4 users with maximum number of issues assigned to them = SELECT(User) => ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),">")=>TOP(4)
what are 4 users who have max number of assignments? = SELECT(User) => ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),">")=>TOP(4)

Top 4 users with minimum number of issues assigned to them = SELECT(User) => ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),"<")=>TOP(4)
what are 4 users who have min number of assignments? = SELECT(User) => ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),"<")=>TOP(4)

Top 4 users with greatest number of open issues assigned to them = SELECT(User) => FILTER_RELATED('open')=>ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),">")=>TOP(4)
what are 4 users who have maximum number of assignments in open isssues? = SELECT(User) => FILTER_RELATED('open')=>ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),">")=>TOP(4)
top 4 users with max number of assignments in isssues with opened state = SELECT(User) => FILTER_RELATED('open')=>ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),">")=>TOP(4)

Top 4 users with smallest number of closed issues assigned to them = SELECT(User) => FILTER_RELATED('closed')=> ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),"<")=>TOP(4)
what are 4 users who have min number of assignments in issues with closed state? = SELECT(User) => FILTER_RELATED('closed')=> ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),"<")=>TOP(4)
top 4 users with minimum number of assignments in closed isssues = SELECT(User) => FILTER_RELATED('closed')=> ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),"<")=>TOP(4)
what are 4 users with min number of closed isssues which were assigned to them? = SELECT(User) => FILTER_RELATED('closed')=> ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),"<")=>TOP(4)

users who created issues with largest number of comments = SELECT(User) => ORDER_BY ( MAP_BY_PROPERTY(created)=>MAP_BY_PROPERTY(comments)=>MAX(), ">")
users who created most commented isssues = SELECT(User) => ORDER_BY ( MAP_BY_PROPERTY(created)=>MAP_BY_PROPERTY(comments)=>MAX(), ">")
what are users who created issues which contain max number of comments? = SELECT(User) => ORDER_BY ( MAP_BY_PROPERTY(created)=>MAP_BY_PROPERTY(comments)=>MAX(), ">")
users who submitted issues which have the maximum number of comments = SELECT(User) => ORDER_BY ( MAP_BY_PROPERTY(created)=>MAP_BY_PROPERTY(comments)=>MAX(), ">")
creators of isssues with the largest number of comments = SELECT(User) => ORDER_BY ( MAP_BY_PROPERTY(created)=>MAP_BY_PROPERTY(comments)=>MAX(), ">")

user who created issue with largest number of comments = SELECT(User) => ORDER_BY ( MAP_BY_PROPERTY(created)=>MAP_BY_PROPERTY(comments)=>MAX(), ">") => FIRST()
who created issues which contain max number of comments? = SELECT(User) => ORDER_BY ( MAP_BY_PROPERTY(created)=>MAP_BY_PROPERTY(comments)=>MAX(), ">") => FIRST()