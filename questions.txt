!github.yaml
users = SELECT(User)
issues assigned to Mike = SELECT(Issue) => FILTER(assigned_to,'Mike','in')
issues created by Mike = SELECT(Issue) => FILTER(created_by,'Mike','in')
issues created by Mike or Gleb = SELECT(Issue)=>FILTER(created_by, set('Mike','Gleb'),'in')
repositories with issues created by Mike = SELECT(Repository)=>FILTER_RELATED(PROPERTY('Mike',inverseOf(created_by)))
open issues=SELECT(Issue)=>FILTER_RELATED('open')
number of open issues=SELECT(Issue)=>FILTER_RELATED('open')=>COUNT()
issues with more then 5 comments=SELECT(Issue)=>FILTER(comments,"5",">")
issues with more comments then in #434 =SELECT(Issue)=>FILTER(comments,PROPERTY("#434",comments),">")
repositories with more issues then Denis created = SELECT(Repository)=>FILTER(issues,PROPERTY("Denis",created),"count>")
Who created more issues then Denis = SELECT(User)=>FILTER(issues,PROPERTY("Denis",created),"count>")
comments created by users from CISCO = SELECT(Comment)=>FILTER(user,PROPERTY('CISCO',inverseOf(from)),'in')
total number of comments = SELECT(Comment)=>COUNT()
comments in #434 = SELECT(Comment)=> FILTER_RELATED("#434")
comments in issue #434 = SELECT(Comment)=> FILTER_RELATED("#434")
comments related to #434 = SELECT(Comment)=> FILTER_RELATED("#434")
comments created by Mike in #434 = SELECT(Comment) => FILTER(user,"Mike",'in') => FILTER_RELATED("#434")
comments related to #434 and created by Mike = SELECT(Comment) => FILTER_RELATED("#434") => FILTER(user,"Mike",'in')
comments of #434 = SELECT(Comment)=> FILTER_RELATED("#434")
labels of #434 = SELECT(Label) => FILTER_RELATED("#434")
#434 labels = PROPERTY("#434",labels)
Denis issues = SELECT(Issue)=>FILTER_RELATED('Denis')
comments in issues assigned to Mike = SELECT(Comment)=>FILTER_RELATED(PROPERTY('Mike',inverseOf(assigned_to)))
comments in issues assigned to Mike or Gleb = SELECT(Comment)=>FILTER_RELATED(PROPERTY(set('Mike','Gleb'),inverseOf(assigned_to)))
comments in issues assigned to Mike and Gleb = SELECT(Comment)=>FILTER_RELATED(intersect(PROPERTY('Mike',inverseOf(assigned_to)),PROPERTY('Gleb',inverseOf(assigned_to))))
comments in issues not assigned to Mike = SELECT(Comment)=>FILTER_RELATED(SELECT(Issue)=>FILTER(assigned_to,"Mike","not in"))
comments in issues not assigned to Mike = SELECT(Comment)=>FILTER_RELATED(SELECT(Issue)=>FILTER(assigned_to,"Mike","not in"))
comments in issues not assigned to Mike or Gleb = SELECT(Comment)=>FILTER_RELATED(SELECT(Issue)=>FILTER(assigned_to,set("Mike","Gleb"),"not in"))
comments in issues not assigned to Mike and Gleb and Denis = SELECT(Comment)=>FILTER_RELATED(SELECT(Issue)=>FILTER(assigned_to,set("Mike","Gleb","Denis"),"not in all"))
issues not assigned to Mike and not assigned to Gleb = SELECT(Issue)=>FILTER(assigned_to,"Mike","not in")=>FILTER(assigned_to,"Gleb","not in")
issues not assigned to Mike or not assigned to Gleb = SELECT(Issue)=>or(FILTER(assigned_to,"Mike","not in"),FILTER(assigned_to,"Gleb","not in"))
issues that are assigned to Mike = SELECT(Issue) => FILTER(assigned_to,"Mike","in")
issues that assigned to Mike = SELECT(Issue) => FILTER(assigned_to,"Mike","in")
issues that are not assigned to Mike = SELECT(Issue) => FILTER(assigned_to,"Mike","not in")
issues that not assigned to Mike = SELECT(Issue) => FILTER(assigned_to,"Mike","not in")
Mike issues that not assigned to Denis = SELECT(Issue) =>FILTER_RELATED('Mike')=>FILTER(assigned_to,"Denis","not in")
comments created by Mike in issues closed by Gleb and created by users from CISCO = SELECT(Comment)=>FILTER(created_by,'Mike','in')=>FILTER_RELATED(SELECT(Issue)=>FILTER(closed_by,"Gleb","in")=>FILTER(created_by,PROPERTY('CISCO',inverseOf(from)),"in"))
issues that are not assigned to =SELECT(Issue)=>FILTER(assigned_to,"*","not in")
issues that are assigned to =SELECT(Issue)=>FILTER(assigned_to,"*","in")
issues created by Mike and not assigned to = SELECT(Issue)=>FILTER(created_by,"Mike","in")=>FILTER(assigned_to,"*","not in")
issues that are not assigned and created by Mike= SELECT(Issue)=>FILTER(assigned_to,"*","not in")=>FILTER(created_by,"Mike","in")
issues with more then 5 comments that are created by Denis = SELECT(Issue)=>FILTER(comments,"5",">")=>FILTER(created_by,"Denis","in")
issues with more then 5 comments that are not created by Denis = SELECT(Issue)=>FILTER(comments,"5",">")=>FILTER(created_by,"Denis","not in")
issues with label 'Bug' = SELECT(Issue)=>FILTER(labels,"Bug","in")
issues with label 'Bug' and label Blocker = SELECT(Issue)=>FILTER(labels,"Bug","in")=>FILTER(labels,"Blocker","in")
users who created open issues = SELECT(User)=>FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in")
users who created more then 5 open issues = SELECT(User)=>COUNT_COMPARE(FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in"),5,">")
who created more then 5 open issues= COUNT_COMPARE(FILTER(created,SELECT(Issue)=>FILTER_RELATED('open'),"in"),5,">")
users with more then 5 open issues = SELECT(User)=>COUNT_COMPARE(FILTER_RELATED(SELECT(Issue)=>FILTER_RELATED('open')),5,">")
users who have less then 5 open issues = SELECT(User)=>COUNT_COMPARE(FILTER_RELATED(SELECT(Issue)=>FILTER_RELATED('open')),5,"<")
users who have 5 open issues = SELECT(User)=>COUNT_COMPARE(FILTER_RELATED(SELECT(Issue)=>FILTER_RELATED('open')),5,"=")
users who have exactly 5 open issues = SELECT(User)=>COUNT_COMPARE(FILTER_RELATED(SELECT(Issue)=>FILTER_RELATED('open')),5,"=")
users who have > 5 open issues = SELECT(User)=>COUNT_COMPARE(FILTER_RELATED(SELECT(Issue)=>FILTER_RELATED('open')),5,">")
users who have 5 or more open issues = SELECT(User)=>COUNT_COMPARE(FILTER_RELATED(SELECT(Issue)=>FILTER_RELATED('open')),5,">=")
users who have 5 or less open issues = SELECT(User)=>COUNT_COMPARE(FILTER_RELATED(SELECT(Issue)=>FILTER_RELATED('open')),5,"<=")
users who have 5 or 7 open issues = SELECT(User)=>COUNT_COMPARE(FILTER_RELATED(SELECT(Issue)=>FILTER_RELATED('open')),set(5,7),"=")
issues created at last month=SELECT(Issue)=>FILTER(created_at,"last month","in")
issues created later then year ago=SELECT(Issue)=>FILTER(created_at,"year ago",">=")
issues created later then year ago and earlier then in last month =SELECT(Issue)=>FILTER(created_at,"year ago",">=")=>FILTER(created_at,"last month","<")
users who created issues created later then year ago and earlier then in last month =SELECT(User)=>FILTER(created,SELECT(Issue)=>FILTER(created_at,"year ago",">=")=>FILTER(created_at,"last month","<"),"in")
issues commented by Denis = SELECT(Issue)=>FILTER(comments,PROPERTY("Denis",inverseOf(user)),"in")
most commented issues = SELECT(Issue)=>ORDER_BY(comments,">")
most commented open issues = SELECT(Issue)=>FILTER_RELATED('open')=>ORDER_BY(comments,">")
issues with most comments = SELECT(Issue)=>ORDER_BY(comments,">")
most commented issue = SELECT(Issue)=>ORDER_BY(comments,">")=>FIRST()
least commented issue = SELECT(Issue)=>ORDER_BY(comments,"<")=>FIRST()
issues with comments created by Gleb = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment)=>FILTER(created_by,"Gleb","in"))
issues with most comments created by Gleb = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment)=>FILTER(created_by,"Gleb","in"))=>ORDER_BY(comments,">")
issues with most comments not created by Gleb = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment)=>FILTER(created_by,"Gleb","not in"))=>ORDER_BY(comments,">")
issues that have comments created by Gleb = SELECT(Issue)=>FILTER_RELATED(SELECT(Comment)=>FILTER(created_by,"Gleb","in"))
comments that are related to issues created by Gleb = SELECT(Comment)=>FILTER_RELATED(SELECT(Issue)=>FILTER(created_by,"Gleb","in"))
issues without labels =SELECT(Issue)=>FILTER(labels,"*","not in")
issues without assignee =SELECT(Issue)=>FILTER(assignee,"*","not in")
issues in M3 without assignee = SELECT(Issue)=>FILTER_RELATED("M3")=>FILTER(assignee,"*","not in")
assignees of issues = SELECT(Issue) => MAP_BY_PROPERTY(assignee)
assignees of issues from CISCO = SELECT(Issue) => MAP_BY_PROPERTY(assignee) => FILTER_RELATED("CISCO")
What is the maximum number of comments = SELECT(Issue) => MAP_BY_PROPERTY(comments)=> MAX()
Who created most of issues in raml-js-parser-2 = FILTER(created,SELECT(Issue)=>FILTER_RELATED("raml-js-parser-2"),"in")=>ORDER_BY_PASSING_COUNT(">")
repositories with most of issues = SELECT(Repository)=> ORDER_BY(issues,"count>")
users who have issues assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),"*","in")
users who have open issues assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open"),"in")
users who have open issues created by Mike assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open")=>FILTER(created_by,"Mike","in"),"in")
users with issues assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),"*","in")
users without issues assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),"*","not in")
users who does not have open issues created by Mike assigned to them = SELECT(User) => FILTER(inverseOf(assigned_to),SELECT(Issue)=>FILTER_RELATED("open")=>FILTER(created_by,"Mike","in"),"not in")
users who does not created issues = SELECT(User)=>FILTER(created,"*","not in")
users who does not created any issues = SELECT(User)=>FILTER(created,"*","not in")
Who does not created any issues = FILTER(created,"*","not in")
Who does not created anything = FILTER(created,"*","not in")
Who does not created anything that is still open= FILTER(created,FILTER_RELATED("open"),"not in")
users who does not created anything assigned to Denis= SELECT(User)=>FILTER(created,FILTER(assigned_to,"Denis","in"),"not in")
repositories without open issues=SELECT(Repository)=>FILTER(issues,SELECT(Issue)=>FILTER_RELATED("open"),"not in")
repositories ordered by stars = SELECT(Repository) => ORDER_BY(stars,">")
repositories ordered by number of stars = SELECT(Repository) => ORDER_BY(stars,">")
repositories ordered by number of open issues = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER_RELATED('open')=>COUNT(),">")
issues created by users from CISCO = SELECT(Issue)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")
repositories ordered by number of issues created by users from CISCO = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")=>COUNT(),">")
repository with maximum amount of issues created by users from CISCO = SELECT(Repository) => ORDER_BY(MAP_BY_PROPERTY(issues)=>FILTER(created_by,SELECT(User)=>FILTER(from,"CISCO","in"),"in")=>COUNT(),">")=>FIRST()
issues that are assigned to the same user that created them = SELECT(Issue) => FILTER(assigned_to,PROPERTY(CONTEXT(),created_by),"in")
Users that created more then 1 issue  = SELECT(User) => FILTER(created,1,"count>")
Users who created more then 2 open issues  = SELECT(User) => FILTER_QUERY(MAP_BY_PROPERTY(created)=>FILTER_RELATED("open"),2,"count>")
issues that are assigned to Denis but not created by Gleb = SELECT(Issue)=>FILTER(assigned_to,"Denis","in")=>FILTER(created_by,"Gleb","not in")
issues without comments = SELECT(Issue)=>not(FILTER_RELATED(SELECT(Comment)))
issues with comments =  SELECT(Issue)=>FILTER_RELATED(SELECT(Comment))
issues with open milestones = SELECT(Issue)=>FILTER_RELATED(SELECT(Milestone)=>FILTER_RELATED("open"))
milestones that have more then 4 open issues ordered by created at=SELECT(Milestone)=>FILTER_QUERY( MAP_BY_PROPERTY(inverseOf(milestone))=>SELECT(Issue)=>FILTER_RELATED('open'),4,"count>")=>ORDER_BY(created_at,">")
issues with more comments then count of repositories = SELECT(Issue)=>FILTER(comments,SELECT(Repository)=>COUNT(),">")
issues sorted by count of comments= SELECT(Issue)=>ORDER_BY(comments,">")
issues that have closed state=SELECT(Issue)=>FILTER(state,"closed","in")
issues not assigned to user who created them= SELECT(Issue) => FILTER(assigned_to,PROPERTY(CONTEXT(),created_by),"not in")
issues that have from 5 to 10 comments = SELECT(Issue)=>FILTER(comments,5,">=")=>FILTER(comments,10,"<=")
issues with 5 - 10 comments = SELECT(Issue)=>FILTER(comments,5,">=")=>FILTER(comments,10,"<=")
issues with comments in range from 5 to 10 = SELECT(Issue)=>FILTER(comments,5,">=")=>FILTER(comments,10,"<=")
issues that was created from last january to march = SELECT(Issue)=>FILTER(created,"last january",">=")=>FILTER(comments,"march","<=")
When newest issue in raml-js-parser was created?=SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>MAP_BY_PROPERTY(created_by)=>MAX()
What is  newest issue in raml-js-parser?=SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>ORDER_BY(created_by,">")=>FIRST()
What are the newest issues in raml-js-parser was created?=SELECT(Issue)=>FILTER_RELATED("raml-js-parser")=>ORDER_BY(created_at,">")
Who created newest issue?=SELECT(User)=>FILTER(created,SELECT(Issue)=>ORDER_BY(created_by,">")=>FIRST(),"in")
Who created first issue?=SELECT(User)=>FILTER(created,SELECT(Issue)=>ORDER_BY(created_by,">")=>FIRST(),"in")
Users who created most of issues=SELECT(User)=>ORDER_BY(MAP_BY_PROPERTY(created)=>COUNT(),">")
Users orderded by number of isssues assigned to them=SELECT(User) => ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),">")
Top 4 users with maximum number of issues assigned to them=SELECT(User) => ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),">")=>TOP(4)
Top 4 users with minimum number of issues assigned to them=SELECT(User) => ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),"<")=>TOP(4)
Top 4 users with greatest number of open issues assigned to them=SELECT(User) => FILTER_RELATED('open')=>ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),">")=>TOP(4)
Top 4 users with smallest number of closed issues assigned to them=SELECT(User) => FILTER_RELATED('closed')=> ORDER_BY( MAP_BY_PROPERTY(inverseOf(assigned_to)=>COUNT()),"<")=>TOP(4)
users who created issues with largest number of comments = SELECT(User) => ORDER_BY ( MAP_BY_PROPERTY(created)=>MAP_BY_PROPERTY(comments)=>MAX(), ">")
user who created issue with largest number of comments = SELECT(User) => ORDER_BY ( MAP_BY_PROPERTY(created)=>MAP_BY_PROPERTY(comments)=>MAX(), ">") => FIRST()